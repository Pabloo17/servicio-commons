JSON Web Token

IMPORTANTE: Configurar tiempo de caducidad corto (1 o 2 horas)

Consta de tres partes separadas por un punto:

 -	HEADER: Que contiene el algoritmo de encriptacion y el tipo de token
 -	PAYLOAD: Que contiene los datos que queremos enviar, generalmente: un id, un name y la fecha de creación
 -	SIGNATURE(FIRMA): Contiene la parte de seguridad para asegurarnos de que el token no ha sido manipulado. Esta formado por
					el HEADER en base64 + PAYLOAD en base64 + clave de seguridad
 
 Evitar mandar información sensible como contraseñas ya que al estar codificado puede ser facilmente decodificado
 
 
 Session Storage: Lo que se almacene aqui dura el tiempo de sesión, recomendado guardar aqui el JWT si tenemos un tiempo de caducidad corto
 
 Local Storage: Es persistente aunque se reinicie el equipo, por lo que es recomendado guargar aqui el JWT si tenemos un tiempo de caducidad
				largo como varias semanas.
				

OAuth2: Implementacion de Spring Security para autenticar y autorizar usuarios usando JWT

DOCUMENTACION:https://jwt.io/

PETICION POSTMAN: Para obtener el token.En authorization seleccionar "Basic" poner usuario y contraseña configuradas en el metodo configure(clients) de la clase AuthorizationServerConfig

                  En body seleccionar "x-www-form-urlencoded" e introducir las credendiales del usuario(username y password como keys) con sus valores en bbdd sin codificar.
				  además de un campo "grant_type" con valor "password" (configurado en el mismo método)
				  
				  Para las peticiones que requieran token, hay que seleccionar bearer token en authorization
				  
PARA OBTENER REFRESH TOKEN:
	1: Hacer una peticion normal, para obtener el token
	2: Copiar el valor del campo refresh token
	3: Del body eliminar las cabeceras username y password
	4: En la cabecera grant_type poner valor refresh_token
	5: Añadir una nueva cabecera llamada refresh_token y como valor pegar el campo refresh_token copiado anteriormente